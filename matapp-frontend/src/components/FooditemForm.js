import { Button, Card, CardContent, Grid, Stack, TextField, Typography } from '@mui/material'
import React from 'react'
import { useDispatch } from 'react-redux'
import { addFooditem } from '../reducers/fooditemReducer'
import { createNotification } from '../reducers/notificationReducer'

/*
foodItem: {
  name: String,
  protein: Number,
  fat: Number,
  carbohydrate: Number,
  id: String (generated by db)
}
*/
const FooditemForm = ({ fooditemObject = {}, onSuccess = (() => null ), onCancel }) => {
  const dispatch = useDispatch()

  const handleAddFoodItem = async (event) => {
    event.preventDefault()
    console.log('Adding food item', event.target.food.value)

    const foodItem = {
      name: event.target.food.value,
      protein: event.target.protein.value,
      fat: event.target.fat.value,
      carbohydrate: event.target.carb.value
    }
    const returnValue = await dispatch(addFooditem(foodItem))
    if (returnValue instanceof Error) {
      //reducer encountered an error and returned it
      //console.log('Error creating fooditem:', returnValue.response.data.error)
      dispatch(createNotification(returnValue.response.data.error))
      //@TODO: Add to error notification window
    } else {
      //zero out form
      event.target.food.value = ''
      event.target.carbs.value = ''
      event.target.protein.value = ''
      event.target.fat.value = ''
      console.log('returnValue sending back:', returnValue)
      onSuccess(returnValue)
    }

  }
  return (
    <Card variant='outlined'>
      <CardContent>
        <Typography variant='h5'>
              Create fooditem
        </Typography>
        <form onSubmit={handleAddFoodItem} onReset={onCancel}>
          <Stack direction='column' spacing={1} >
            <TextField name='food' id='food-name' variant='outlined' label='Food name' defaultValue={fooditemObject.name} />
            <TextField name='carb' inputProps={{ inputMode: 'numeric', pattern: '([0-9]+\\[.,]?[0-9]*|\\[.,][0-9]+)' }} id='carbs' variant='outlined' label='Carbohydrates (per 100g)' />
            <TextField name='fat' inputProps={{ inputMode: 'numeric', pattern: '([0-9]+\\[.,]?[0-9]*|\\[.,][0-9]+)' }} id='fat' variant='outlined' label='Fat (per 100g)' />
            <TextField name='protein' inputProps={{ inputMode: 'numeric', pattern: '([0-9]+\\[.,]?[0-9]*|\\[.,][0-9]+)' }} id='protein' variant='outlined' label='Protein (per 100g)' />
            <Button variant='contained' type='submit'>Create</Button>
            <Button variant='outlined' type='reset'>Cancel</Button>
          </Stack>
        </form>
      </CardContent>
    </Card>
  )
}

export default FooditemForm
